@use "sass:math";

$grid-desktop-columns: 12;
$grid-desktop-sideMargin: 0px;
$grid-desktop-gutter: 60px;
$grid-desktop-breakpoint: 1800px;

$grid-mobile-columns: 2;
$grid-mobile-sideMargin: 40px;
$grid-mobile-gutter: 20px;
$grid-mobile-breakpoint: 1081px;

// pixels to % variables
$desk-grid-width: 100% -
  (math.div($grid-desktop-sideMargin * 2, $grid-desktop-breakpoint) * 100%);
$mob-grid-width: 100% -
  (math.div($grid-mobile-sideMargin * 2, $grid-mobile-breakpoint) * 100%);

$desk-gutter: (
  
      math.div($grid-desktop-gutter, $grid-desktop-breakpoint - ($grid-desktop-sideMargin * 2))
     * 100%
);
$mob-gutter: (
  
      math.div($grid-mobile-gutter, $grid-mobile-breakpoint - ($grid-mobile-sideMargin * 2))
     * 100%
);

// FUNCTIONS AND MiXINS
@function col-width($i, $columns) {
  @return math.div(100%, $columns) * $i;
}

@mixin col-props($i, $columns, $gutter) {
  box-sizing: border-box;
  width: col-width($i, $columns);
  padding-left: $gutter*0.5;
  padding-right: $gutter*0.5;
}

@mixin columns-loop($name, $columns, $gutter) {
  @for $i from 0 through $columns {
    &-#{$name}-#{$i} {
      @include col-props($i, $columns, $gutter);
    }
    &-#{$name}-shift-#{$i} {
      margin-left: col-width($i, $columns);
    }
  }
}

@mixin grid-base($width) {
  box-sizing: border-box;
  display: flex;
  margin-left: auto;
  margin-right: auto;
  flex-wrap: wrap;
  max-width: $grid-desktop-breakpoint;
  width: $width;
}

// CLASSES
.container {
  @include grid-base($desk-grid-width);
  @media screen and (max-width: $grid-mobile-breakpoint) {
    width: $mob-grid-width;
  }
  &-0 {
    @include grid-base(100%);
  }
}

.col {
  @include columns-loop(desk, $grid-desktop-columns, $desk-gutter);
  @media screen and (max-width: $grid-mobile-breakpoint) {
    @include columns-loop(mob, $grid-mobile-columns, $mob-gutter);
  }
}